# -*- coding: utf-8 -*-
"""Titanic_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3k1RmRgStKsL7KgZzckXCqAr22PutVP
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.metrics import accuracy_score, mean_squared_error, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

df = pd.read_csv('titanicc.csv')

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']
X = df[features]
y = df['Survived']


numerical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])


categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, ['Age', 'SibSp', 'Parch', 'Fare']),
        ('cat', categorical_transformer, ['Pclass', 'Sex'])
    ])


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_pipeline_without_embarked = Pipeline(steps=[('preprocessor', preprocessor),
                                               ('classifier', LogisticRegression(random_state=42))])

lr_pipeline_without_embarked.fit(X_train, y_train)

linreg_pipeline_without_embarked = Pipeline(steps=[('preprocessor', preprocessor),
                                                   ('regressor', LinearRegression())])


linreg_pipeline_without_embarked.fit(X_train, y_train)

lr_predictions_without_embarked = lr_pipeline_without_embarked.predict(X_test)


print("Logistic Regression Classification Report without 'Embarked' column:")
print(classification_report(y_test, lr_predictions_without_embarked))


linreg_predictions_without_embarked = linreg_pipeline_without_embarked.predict(X_test)
linreg_predictions_without_embarked = np.where(linreg_predictions_without_embarked >= 0.5, 1, 0)


print("Linear Regression as Classifier Report without 'Embarked' column:")
print(classification_report(y_test, linreg_predictions_without_embarked))

df['FamilySize'] = df['SibSp'] + df['Parch']

df['Pclass_Age_Interaction'] = df['Pclass'] * df['Age']

features = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'FamilySize', 'Pclass_Age_Interaction']
X = df[features]
y = df['Survived']


preprocessor = ColumnTransformer(
    transformers=[
        ('num', SimpleImputer(strategy='mean'), ['Age', 'SibSp', 'Parch', 'Fare']),
        ('cat', Pipeline(steps=[
            ('imputer', SimpleImputer(strategy='most_frequent')),
            ('onehot', OneHotEncoder(handle_unknown='ignore'))
        ]), ['Pclass', 'Sex', 'Embarked', 'FamilySize', 'Pclass_Age_Interaction'])
    ])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

logistic_model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression(random_state=42))
])
logistic_model.fit(X_train, y_train)


logistic_predictions = logistic_model.predict(X_test)
print("Logistic Regression Classification Report:")
print(classification_report(y_test, logistic_predictions))


linear_model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])
linear_model.fit(X_train, y_train)

linear_predictions = linear_model.predict(X_test)
linear_predictions = np.where(linear_predictions >= 0.5, 1, 0)
print("Linear Regression as Classifier Report:")
print(classification_report(y_test, linear_predictions))